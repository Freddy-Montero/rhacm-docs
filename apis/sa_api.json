{
  "swagger": "2.0",
  "info": {
    "title": "Security findings API",
    "description": "The security findings API\n",
    "version": "1.0.0"
  },
  "basePath": "/findings",
  "securityDefinitions": {
    "UserMin": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "UserMin": [

      ]
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/{account_id}/graph": {
      "post": {
        "summary": "Query findings.",
        "operationId": "postGraph",
        "x-action": "security-advisor.findings.read",
        "x-action-display-name": "security-advisor.findings.read",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::findings:all",
          "targetTypeURI": "security-advisor/findings",
          "request": {
            "fieldValue": {
              "account_id": "Account id"
            }
          }
        },
        "description": "Sample to query findings.",
        "consumes": [
          "application/graphql",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Body to query findings.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": {
                "QuerySchema_sample": "{ __type(name: \"Query\"){ name fields{name type {kind name} args{name type {kind name} defaultValue} description }}}",
                "Note_query_sample": "{note(providerId: \"securityAdvisorProvider\", id: \"securityAdvisorNoteId\", accountId: \"id-mycluster-account\") {name longDescription updateTime reportedBy { id title } finding { severity nextSteps { title }} securityClassification { securityCategories securityControl securityStandards}}}",
                "Occurrence_query_sample": "{occurrences(kind: \"FINDING\") {name noteName updateTime createTime shortDescription remediation context {accountId region resourceType resourceName resourceId resourceCrn serviceName serviceCrn clusterName namespaceName} reportedBy {id title url } finding {severity certainty networkConnection {client {address port} server {address port} direction protocol} nextSteps {title url} dataTransferred {clientBytes clientPackets serverBytes serverPackets}} securityClassification { securityCategories securityControl securityStandards}}}"
              }
            }
          }
        ],
        "tags": [
          "Findings Graph"
        ],
        "x-swagger-router-controller": "findingsController"
      }
    },
    "/v1/{account_id}/providers": {
      "get": {
        "summary": "Lists all 'Providers' for a given account ID.",
        "operationId": "listProviders",
        "x-action-display-name": "security-advisor.metadata.read",
        "x-action": "security-advisor.metadata.read",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::provider:all",
          "targetTypeURI": "security-advisor/providers",
          "request": {
            "fieldValue": {
              "page_size": "Providers count",
              "page_token": "Page Token"
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of all Providers is successful.",
            "schema": {
              "$ref": "#/definitions/apiListProvidersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Number of providers to return in the list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token to provide to go to a particular spot in the list.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Providers"
        ],
        "x-swagger-router-controller": "findingsController"
      }
    },
    "/v1/{account_id}/providers/{provider_id}/notes": {
      "post": {
        "summary": "Creates a new 'Note'.",
        "operationId": "createNote",
        "x-action": "security-advisor.metadata.write",
        "x-action-display-name": "security-advisor.metadata.write",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::note:<note_id>",
          "targetTypeURI": "security-advisor/note",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "id": "Note id",
              "kind": "Note kind",
              "kpi": "KPI details",
              "reported_by": "Reported by",
              "create_time": "Note creation time",
              "expiration_time": "Note expiration_time"
            }
          },
          "response": {
            "fieldValue": {
              "id": "Note id",
              "name": "Note name"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Note created successfully.",
            "schema": {
              "$ref": "#/definitions/apiNote"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "Name of the component that provides the 'Note'. This field contains the provider_id, for example: providers/{provider_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Body to create a 'Note'.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiNote"
            }
          }
        ],
        "tags": [
          "Findings Notes"
        ],
        "x-swagger-router-controller": "findingsController"
      },
      "get": {
        "summary": "Lists all 'Notes' for a given provider.",
        "operationId": "listNotes",
        "x-action-display-name": "security-advisor.metadata.read",
        "x-action": "security-advisor.metadata.read",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::note:all",
          "targetTypeURI": "security-advisor/notes",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "page_size": "Notes count",
              "page_token": "Page Token"
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of all 'Notes' is successful.",
            "schema": {
              "$ref": "#/definitions/apiListNotesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "Name of the component that provides the notes. This field contains the provider_id, for example: providers/{provider_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Number of notes to return in the list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token to provide to go to a particular spot in the list.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Notes"
        ],
        "x-swagger-router-controller": "findingsController"
      }
    },
    "/v1/{account_id}/providers/{provider_id}/notes/{note_id}": {
      "get": {
        "summary": "Returns the requested 'Note'.",
        "operationId": "getNote",
        "x-action-display-name": "security-advisor.metadata.read",
        "x-action": "security-advisor.metadata.read",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::note:<note_id>",
          "targetTypeURI": "security-advisor/note",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "note_id": "Note id"
            }
          },
          "response": {
            "fieldValue": {
              "name": "Note name",
              "kind": "Note kind",
              "reported_by": "Reported by",
              "create_time": "Note creation time",
              "update_time": "Note update time",
              "expiration_time": "Note expiration_time"
            }
          }
        },
        "responses": {
          "200": {
            "description": "The return of the requested 'Note' is successful",
            "schema": {
              "$ref": "#/definitions/apiNote"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the note, for example: providers/{provider_id}/notes/{note_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The 'name' of the note, for example: providers/{provider_id}/notes/{note_id}",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Notes"
        ],
        "x-swagger-router-controller": "findingsController"
      },
      "put": {
        "summary": "Updates an existing 'Note'.",
        "operationId": "updateNote",
        "x-action-display-name": "security-advisor.metadata.update",
        "x-action": "security-advisor.metadata.update",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::note:<note_id>",
          "targetTypeURI": "security-advisor/note",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "note_id": "Note id",
              "kind": "Note kind",
              "reported_by": "Reported by",
              "create_time": "Note creation time",
              "update_time": "Note update time",
              "expiration_time": "Note expiration_time"
            }
          },
          "response": {
            "fieldValue": {
              "name": "Note name",
              "update_time": "Note update time"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates to an existing 'Note' is successful.",
            "schema": {
              "$ref": "#/definitions/apiNote"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the note, for example: providers/{provider_id}/notes/{note_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The 'name' of the note, for example: providers/{provider_id}/notes/{note_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Body to update a 'Note'.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiNote"
            }
          }
        ],
        "tags": [
          "Findings Notes"
        ],
        "x-swagger-router-controller": "findingsController"
      },
      "delete": {
        "summary": "Deletes the specified 'Note' from the system.",
        "operationId": "deleteNote",
        "x-action-display-name": "security-advisor.metadata.delete",
        "x-action": "security-advisor.metadata.delete",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::note:<note_id>",
          "targetTypeURI": "security-advisor/note",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "note_id": "Note id"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deleting the specified 'Note' is successful.",
            "schema": {
              "$ref": "#/definitions/apiEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the note, for example: providers/{provider_id}/notes/{note_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The 'name' of the note, for example: providers/{provider_id}/notes/{note_id}",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Notes"
        ],
        "x-swagger-router-controller": "findingsController"
      }
    },
    "/v1/{account_id}/providers/{provider_id}/occurrences/{occurrence_id}/note": {
      "get": {
        "summary": "Gets the 'Note' attached to the given 'Occurrence'.",
        "operationId": "getOccurrenceNote",
        "x-action-display-name": "security-advisor.metadata.read",
        "x-action": "security-advisor.metadata.read",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::note:<note_id>",
          "targetTypeURI": "security-advisor/occurrence/note",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "occurrence_id": "Occurrence id"
            }
          },
          "response": {
            "fieldValue": {
              "name": "Note name",
              "kind": "Note kind",
              "reported_by": "Reported by",
              "create_time": "Note creation time",
              "update_time": "Note update time",
              "expiration_time": "Note expiration_time"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Obtains the 'Note' that is associated with the given 'Occurrence' successfully.",
            "schema": {
              "$ref": "#/definitions/apiNote"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the occurrence, for example: providers/{provider_id}/occurrences/{occurrence_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrence_id",
            "in": "path",
            "description": "The 'name' of the occurrence, for example: providers/{provider_id}/occurrences/{occurrence_id}",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Notes"
        ],
        "x-swagger-router-controller": "findingsController"
      }
    },
    "/v1/{account_id}/providers/{provider_id}/occurrences": {
      "post": {
        "summary": "The method to create a new 'Occurrence'.",
        "operationId": "createOccurrence",
        "x-action-display-name": "security-advisor.findings.write",
        "x-action": "security-advisor.findings.write",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::occurrence:<occurrence_id>",
          "targetTypeURI": "security-advisor/occurrence",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "Replace-If-Exists": "Replace existing occurrence",
              "id": "Occurrence id",
              "note_name": "Note name",
              "kind": "Occurrence kind",
              "create_time": "Occurrence creation time",
              "region": "Context region",
              "resource_crn": "Context resource crn"
            }
          },
          "response": {
            "fieldValue": {
              "name": "Occurrence name"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creating an 'Occurence' is successful",
            "schema": {
              "$ref": "#/definitions/apiOccurrence"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "Replace-If-Exists",
            "description": "Allows replacing an existing occurrence when it is set to true.",
            "in": "header",
            "type": "boolean",
            "required": false
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the occurrence, for example: providers/{provider_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Sample body to create an 'Occurence'.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOccurrence"
            }
          }
        ],
        "tags": [
          "Findings Occurrences"
        ],
        "x-swagger-router-controller": "findingsController"
      },
      "get": {
        "summary": "Lists the active 'Occurrences' for a given provider based on your filters.",
        "operationId": "listOccurrences",
        "x-action-display-name": "security-advisor.findings.read",
        "x-action": "security-advisor.findings.read",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::occurrence:all",
          "targetTypeURI": "security-advisor/occurrences",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "page_size": "Notes count",
              "page_token": "Page Token"
            }
          }
        },
        "responses": {
          "200": {
            "description": "All active 'Occurences' are listed successfully.",
            "schema": {
              "$ref": "#/definitions/apiListOccurrencesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the occurrence, for example: providers/{provider_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Number of occurrences to return in the list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token to provide to go to a particular spot in the list.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Occurrences"
        ],
        "x-swagger-router-controller": "findingsController"
      }
    },
    "/v1/{account_id}/providers/{provider_id}/notes/{note_id}/occurrences": {
      "get": {
        "summary": "Lists the 'Occurrences' that reference a specific 'Note' across all your customer providers.",
        "operationId": "listNoteOccurrences",
        "x-action-display-name": "security-advisor.findings.read",
        "x-action": "security-advisor.findings.read",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::occurrence:all",
          "targetTypeURI": "security-advisor/note/occurrences",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "note_id": "Note id",
              "page_size": "Notes count",
              "page_token": "Page Token"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Occurrences that reference the specified 'Note' is listed successfully.",
            "schema": {
              "$ref": "#/definitions/apiListNoteOccurrencesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the 'Note', for example: providers/{provider_id}/notes/{note_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The 'name' of the 'Note', for example: providers/{provider_id}/notes/{note_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Number of notes to return in the list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token to provide to go to a particular spot in the list.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Occurrences"
        ],
        "x-swagger-router-controller": "findingsController"
      }
    },
    "/v1/{account_id}/providers/{provider_id}/occurrences/{occurrence_id}": {
      "get": {
        "summary": "Returns the requested 'Occurrence'.",
        "operationId": "getOccurrence",
        "x-action-display-name": "security-advisor.findings.read",
        "x-action": "security-advisor.findings.read",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::occurrence:<occurrence_id>",
          "targetTypeURI": "security-advisor/occurrence",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "occurrence_id": "Occurrence id"
            }
          },
          "response": {
            "fieldValue": {
              "id": "Occurrence id",
              "name": "Occurrence name",
              "note_name": "Note name",
              "kind": "Occurrence kind",
              "create_time": "Occurrence creation time",
              "update_time": "Occurrence update time",
              "account_id": "Context account id",
              "region": "Context region",
              "resource_crn": "Context resource crn"
            }
          }
        },
        "responses": {
          "200": {
            "description": "The return of the requested 'Occurence' is successful.",
            "schema": {
              "$ref": "#/definitions/apiListOccurrencesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the 'Occurrence', for example: providers/{provider_id}/occurrences/{occurrence_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrence_id",
            "in": "path",
            "description": "The 'name' of the 'Occurrence', for example: providers/{provider_id}/occurrences/{occurrence_id}",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Occurrences"
        ],
        "x-swagger-router-controller": "findingsController"
      },
      "put": {
        "summary": "Updates an existing 'Occurrence'.",
        "operationId": "updateOccurrence",
        "x-action-display-name": "security-advisor.findings.update",
        "x-action": "security-advisor.findings.update",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::occurrence:<occurrence_id>",
          "targetTypeURI": "security-advisor/occurrence",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "occurrence_id": "Occurrence id",
              "name": "Occurrence name",
              "note_name": "Note name",
              "kind": "Occurrence kind",
              "create_time": "Occurrence creation time",
              "update_time": "Occurrence update time",
              "region": "Context region",
              "resource_crn": "Context resource crn"
            }
          },
          "response": {
            "fieldValue": {
              "name": "Occurrence name",
              "update_time": "Occurrence update time"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updating an existing 'Occurence' is successful.",
            "schema": {
              "$ref": "#/definitions/apiOccurrence"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the 'Occurrence', for example: providers/{provider_id}/occurrences/{occurrence_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrence_id",
            "in": "path",
            "description": "The 'name' of the 'Occurrence', for example: providers/{provider_id}/occurrences/{occurrence_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Sample body to update an 'Occurence'.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOccurrence"
            }
          }
        ],
        "tags": [
          "Findings Occurrences"
        ],
        "x-swagger-router-controller": "findingsController"
      },
      "delete": {
        "summary": "Deletes the given 'Occurrence' from the system.",
        "operationId": "deleteOccurrence",
        "x-action-display-name": "security-advisor.findings.delete",
        "x-action": "security-advisor.findings.delete",
        "x-activity-tracker": {
          "type": "findingsapi",
          "targetID": "crn:v1:<cname>:public:security-advisor:us-south:a/<account_id>::occurrence:<occurrence_id>",
          "targetTypeURI": "security-advisor/occurrence",
          "request": {
            "fieldValue": {
              "provider_id": "Provider id",
              "occurrence_id": "Occurrence id"
            }
          }
        },
        "responses": {
          "200": {
            "description": "'Occurence' deletion is successful.",
            "schema": {
              "$ref": "#/definitions/apiEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "description": "The Identity & Access Management (IAM) Bearer token.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccessToken",
            "description": "The Identity & Access Management (IAM) Access token.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The 'name' of the component that provides the 'Occurrence', for example: providers/{provider_id}/notes/{occurrence_id}",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrence_id",
            "in": "path",
            "description": "The 'name' of the 'Occurrence', for example: providers/{provider_id}/notes/{occurrence_id}",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Findings Occurrences"
        ],
        "x-swagger-router-controller": "findingsController"
      }
    }
  },
  "definitions": {
    "apiEmpty": {
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicate\nempty messages in your APIs. For example, you can use it as the request,\nor the response type of an API method.\nThe JSON representation for 'Empty' is an empty JSON object '{}'."
    },
    "apiListProvidersResponse": {
      "type": "object",
      "description": "Response with the listed providers.",
      "properties": {
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProvider"
          },
          "title": "The providers requested"
        }
      }
    },
    "apiListNotesResponse": {
      "type": "object",
      "description": "Response including the listed notes.",
      "properties": {
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiNote"
          },
          "title": "The occurrences requested"
        },
        "next_page_token": {
          "type": "string",
          "description": "The next pagination token in the list response. It must be used as\npage_token for the following request. An empty value means there are no more results."
        }
      }
    },
    "apiListNoteOccurrencesResponse": {
      "description": "Response including the listed occurrences for a note.",
      "type": "object",
      "properties": {
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOccurrence"
          },
          "description": "The occurrences attached to the specified note."
        },
        "next_page_token": {
          "type": "string",
          "description": "Token to receive the next page of notes."
        }
      }
    },
    "apiListOccurrencesResponse": {
      "type": "object",
      "description": "Response including the listed active occurrences.",
      "properties": {
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOccurrence"
          },
          "description": "The occurrences requested."
        },
        "next_page_token": {
          "type": "string",
          "description": "The next pagination token in the list response. It must be used as\n'page_token' for the following request. An empty value means there are no more\nresults."
        }
      }
    },
    "apiNote": {
      "type": "object",
      "description": "Provides a detailed description of a 'Note'.",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the note in the form \"providers/{provider_id}/notes/{note_id}\""
        },
        "short_description": {
          "type": "string",
          "description": "A one sentence description of this 'Note'."
        },
        "long_description": {
          "type": "string",
          "description": "A detailed description of this 'Note'."
        },
        "kind": {
          "$ref": "#/definitions/apiNoteKind",
          "description": "Output only. This explicitly denotes which kind of note is specified. This\nfield can be used as a filter in list requests."
        },
        "related_url": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiNoteRelatedUrl"
          },
          "title": "URLs associated with the note"
        },
        "expiration_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time of expiration for this note; the value is null if note does not expire."
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this note was created.\nThis field can be used as a filter in list requests."
        },
        "update_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this note was last updated.\nThis field can be used as a filter in list requests."
        },
        "provider_id": {
          "type": "string",
          "title": "The provider ID of the note"
        },
        "id": {
          "type": "string",
          "title": "The ID of the note"
        },
        "shared": {
          "type": "boolean",
          "description": "True if this 'Note' can be shared by multiple accounts.",
          "default": true
        },
        "reported_by": {
          "$ref": "#/definitions/Reporter",
          "description": "Details about the reporter of this 'Note'."
        },
        "finding": {
          "$ref": "#/definitions/FindingType",
          "description": "The finding details of the note."
        },
        "kpi": {
          "$ref": "#/definitions/KpiType",
          "description": "The KPI details of the note."
        },
        "card": {
          "$ref": "#/definitions/Card",
          "description": "The card details of the note."
        },
        "section": {
          "$ref": "#/definitions/Section",
          "description": "The section details of the note."
        },
        "policy": {
          "$ref": "#/definitions/Policy",
          "description": "The policy details of the note."
        },
        "security_classification": {
          "$ref": "#/definitions/Classify",
          "description": "Details about the security classification for this finding."
        }
      },
      "required": [
        "id",
        "short_description",
        "long_description",
        "kind",
        "reported_by"
      ],
      "example": {
        "id": "securityAdvisorNoteId",
        "kind": "FINDING",
        "long_description": "Long description here",
        "provider_id": "securityAdvisorProvider",
        "reported_by": {
          "id": "securityAdvisorProvider",
          "title": "Title for reported by"
        },
        "security_classification": {
          "security_categories": [
            "Protections"
          ],
          "security_control": "ControllerName",
          "security_standards": [
            "NIST",
            "CIS"
          ]
        },
        "shared": false,
        "short_description": "short desc",
        "finding": {
          "next_steps": [
            {
              "title": "next steps title"
            }
          ],
          "severity": "MEDIUM"
        }
      }
    },
    "apiProvider": {
      "type": "object",
      "description": "Provides a detailed description of a 'Provider'.",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the provider in the form \"/{account_id}/providers/{provider_id}\""
        },
        "id": {
          "type": "string",
          "title": "The ID of the provider"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "apiNoteKind": {
      "type": "string",
      "enum": [
        "FINDING",
        "KPI",
        "CARD",
        "CARD_CONFIGURED",
        "SECTION",
        "POLICY"
      ],
      "description": "This must be 1&#58;1 with members of our oneofs, it can be used for filtering Note and Occurrence on their kind.\n - FINDING&#58; The note and occurrence represent a finding.\n - KPI&#58; The note and occurrence represent a KPI value.\n - CARD&#58; The note represents a card showing findings and related metric values.\n - CARD_CONFIGURED&#58; The note represents a card configured for a user account.\n - SECTION&#58; The note represents a section in a dashboard.\n - POLICY&#58; The note represents a policy that determines compliance of a resource."
    },
    "apiNoteRelatedUrl": {
      "type": "object",
      "description": "Metadata for any related URL information",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label to describe usage of the URL"
        },
        "url": {
          "type": "string",
          "title": "Specific URL to associate with the note"
        }
      }
    },
    "apiOccurrence": {
      "type": "object",
      "description": "'Occurrence' includes information about analysis occurrences for an image.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. The name of the 'Occurrence' in the form \"providers/{provider_id}/occurrences/{occuurence_id}\""
        },
        "resource_url": {
          "type": "string",
          "description": "The unique URL of the resource, image or the container, for which the 'Occurrence' applies.\nFor example, https://gcr.io/provider/image@sha256:foo.\nThis field can be used as a filter in list requests."
        },
        "note_name": {
          "type": "string",
          "description": "An analysis note associated with the image, in the form \"providers/{provider_id}/notes/{note_id}\"\nThis field can be used as a filter in list requests."
        },
        "kind": {
          "$ref": "#/definitions/apiNoteKind",
          "description": "Output only. This explicitly denotes which of the 'Occurrence' details are specified.\nThis field can be used as a filter in list requests."
        },
        "remediation": {
          "type": "string",
          "title": "A description of actions that can be taken to remedy the 'Note'"
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this 'Occurrence' was created."
        },
        "update_time": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time this 'Occurrence' was last updated."
        },
        "provider_id": {
          "type": "string",
          "title": "The provider ID of the occurrence"
        },
        "id": {
          "type": "string",
          "title": "The ID of the occurrence"
        },
        "context": {
          "$ref": "#/definitions/Context",
          "description": "Details about the context of the 'Occurrence'."
        },
        "finding": {
          "$ref": "#/definitions/Finding",
          "description": "Details of the occurrence of a finding."
        },
        "kpi": {
          "$ref": "#/definitions/Kpi",
          "description": "Details of the occurrence of a KPI."
        },
        "security_classification": {
          "$ref": "#/definitions/Classify",
          "description": "Details about the security classification for the finding."
        }
      },
      "required": [
        "id",
        "note_name",
        "kind"
      ],
      "example": {
        "note_name": "id-mycluster-account/providers/securityAdvisorProvider/notes/securityAdvisorNoteId",
        "kind": "FINDING",
        "message": "short message",
        "remediation": "how to resolve this",
        "provider_id": "securityAdvisorProvider",
        "id": "securityAdvisorOccurrenceId",
        "context": {
          "region": "location",
          "resource_id": "ResourceUID",
          "resource_name": "www.myapp.com",
          "resource_type": "worker",
          "service_name": "application",
          "cluster_name": "local-cluster",
          "namespace_name": "default"
        },
        "finding": {
          "severity": "HIGH",
          "next_steps": [
            {
              "url": "Details URL"
            }
          ]
        },
        "security_classification": {
          "security_standards": [
            "NIST",
            "PCI"
          ],
          "security_categories": [
            "System and communications protections"
          ],
          "security_control": "AppChecker"
        }
      }
    },
    "Certainty": {
      "type": "string",
      "enum": [
        "LOW",
        "MEDIUM",
        "HIGH"
      ],
      "description": "Note provider-assigned confidence on the validity of an occurrence\n- LOW&#58; Low Certainty\n- MEDIUM&#58; Medium Certainty\n- HIGH&#58; High Certainty"
    },
    "Context": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "description": "The IBM Cloud region."
        },
        "resource_crn": {
          "type": "string",
          "description": "The resource CRN, for example certificate CRN, image CRN."
        },
        "resource_id": {
          "type": "string",
          "description": "The resource ID, in case the CRN is not available."
        },
        "resource_name": {
          "type": "string",
          "description": "The user-friendly resource name."
        },
        "resource_type": {
          "type": "string",
          "description": "The resource type name, for example Pod, Cluster, Certificate, Image."
        },
        "service_crn": {
          "type": "string",
          "description": "The service CRN, for example CertMgr Instance CRN."
        },
        "service_name": {
          "type": "string",
          "description": "The service name, for example CertMgr."
        },
        "environment_name": {
          "type": "string",
          "description": "The name of the environment the occurrence applies to."
        },
        "component_name": {
          "type": "string",
          "description": "The name of the component the occurrence applies to."
        },
        "toolchain_id": {
          "type": "string",
          "description": "The ID of the toolchain the occurrence applies to."
        },
        "cluster_name": {
          "type": "string",
          "description": "The name of the cluster the occurrence applies to."
        },
        "namespace_name": {
          "type": "string",
          "description": "The name of the namespace the occurrence applies to."
        }
      }
    },
    "Reporter": {
      "type": "object",
      "description": "The entity reporting a note.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the reporter."
        },
        "title": {
          "type": "string",
          "description": "The title of the reporter."
        },
        "url": {
          "type": "string",
          "description": "The URL of the reporter."
        }
      },
      "required": [
        "id",
        "title"
      ]
    },
    "Severity": {
      "type": "string",
      "enum": [
        "LOW",
        "MEDIUM",
        "HIGH"
      ],
      "description": "Note provider-assigned severity or impact ranking\n- LOW&#58; Low Impact\n- MEDIUM&#58; Medium Impact\n- HIGH&#58; High Impact"
    },
    "FindingType": {
      "type": "object",
      "description": "FindingType provides details about a finding note.",
      "properties": {
        "severity": {
          "$ref": "#/definitions/Severity",
          "default": "MEDIUM",
          "description": "The default severity of the findings related to this 'Note'."
        },
        "next_steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemediationStep"
          },
          "description": "Common remediation steps for the finding of this type."
        }
      },
      "required": [
        "severity"
      ]
    },
    "Finding": {
      "type": "object",
      "description": "Finding provides details about a finding occurrence.",
      "properties": {
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "The common severity of the 'Occurrence'."
        },
        "certainty": {
          "$ref": "#/definitions/Certainty",
          "default": "HIGH",
          "description": "The confidence level on the 'Occurrence'."
        },
        "next_steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemediationStep"
          },
          "description": "Remediation steps for the issues reported in the finding. They override the note's next steps."
        },
        "network_connection": {
          "$ref": "#/definitions/NetworkConnection",
          "description": "Network connection details for the finding."
        },
        "data_transferred": {
          "$ref": "#/definitions/DataTransferred",
          "description": "Details of transferred data for the finding."
        }
      }
    },
    "RemediationStep": {
      "type": "object",
      "description": "A remediation step description and associated URL.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the next step."
        },
        "url": {
          "type": "string",
          "description": "The URL associated to the next steps."
        }
      }
    },
    "NetworkConnection": {
      "type": "object",
      "description": "It provides details about a network connection.",
      "properties": {
        "direction": {
          "type": "string",
          "description": "The direction of the network connection."
        },
        "protocol": {
          "type": "string",
          "description": "The protocol of the network connection."
        },
        "client": {
          "$ref": "#/definitions/SocketAddress",
          "description": "The client socket address of the network connection."
        },
        "server": {
          "$ref": "#/definitions/SocketAddress",
          "description": "The server socket address of the network connection."
        }
      }
    },
    "SocketAddress": {
      "type": "object",
      "description": "It provides details about a socket address.",
      "properties": {
        "address": {
          "type": "string",
          "description": "The IP address of the socket address."
        },
        "port": {
          "type": "integer",
          "description": "The port number of the socket address."
        }
      },
      "required": [
        "address"
      ]
    },
    "DataTransferred": {
      "type": "object",
      "description": "It provides details about data transferred between clients and servers.",
      "properties": {
        "client_bytes": {
          "type": "integer",
          "description": "The number of client bytes transferred."
        },
        "server_bytes": {
          "type": "integer",
          "description": "The number of server bytes transferred."
        },
        "client_packets": {
          "type": "integer",
          "description": "The number of client packets transferred."
        },
        "server_packets": {
          "type": "integer",
          "description": "The number of server packets transferred."
        }
      }
    },
    "KpiType": {
      "type": "object",
      "description": "KpiType provides details about a KPI note.",
      "properties": {
        "aggregation_type": {
          "type": "string",
          "enum": [
            "SUM"
          ],
          "description": "The aggregation type of the KPI values.\n- SUM&#58; A single-value metrics aggregation type that sums up numeric values\n  that are extracted from KPI occurrences.",
          "default": "SUM"
        }
      },
      "required": [
        "aggregation_type"
      ]
    },
    "Kpi": {
      "type": "object",
      "description": "Kpi provides details about a KPI occurrence.",
      "properties": {
        "value": {
          "type": "number",
          "description": "The value of the KPI."
        },
        "total": {
          "type": "number",
          "description": "The total value of the KPI."
        }
      },
      "required": [
        "value"
      ]
    },
    "Section": {
      "type": "object",
      "description": "Card provides details about the card kind of a 'Note'",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the section."
        },
        "image": {
          "type": "string",
          "description": "The image of the section."
        }
      },
      "required": [
        "title",
        "image"
      ]
    },
    "Card": {
      "type": "object",
      "description": "Card provides details about the card kind of a 'Note'.",
      "properties": {
        "section": {
          "type": "string",
          "maxLength": 30,
          "description": "The section the card belongs to."
        },
        "title": {
          "type": "string",
          "maxLength": 28,
          "description": "The title of this card."
        },
        "subtitle": {
          "type": "string",
          "maxLength": 30,
          "description": "The subtitle of the card."
        },
        "order": {
          "type": "integer",
          "description": "The order of the card in which it appears on SA dashboard in the mentioned section.",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6
          ]
        },
        "finding_note_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The finding 'Note' names associated to the card."
        },
        "requires_configuration": {
          "type": "boolean",
          "default": false
        },
        "badge_text": {
          "type": "string",
          "description": "The text associated to the card badge."
        },
        "badge_image": {
          "type": "string",
          "description": "The base64 content of the image associated to the card badge."
        },
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardElement"
          },
          "description": "The elements of the card."
        }
      },
      "required": [
        "section",
        "title",
        "subtitle",
        "finding_note_names",
        "elements"
      ]
    },
    "CardElement": {
      "type": "object",
      "description": "CardElement provides details about the elements of a Card.",
      "discriminator": "kind",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "NUMERIC",
            "BREAKDOWN",
            "TIME_SERIES"
          ],
          "description": "Kind of element\n- NUMERIC&#58; Single numeric value\n- BREAKDOWN&#58; Breakdown of numeric values\n- TIME_SERIES&#58; Time-series of numeric values"
        },
        "default_time_range": {
          "type": "string",
          "description": "The default time range of the card element.",
          "enum": [
            "1d",
            "2d",
            "3d",
            "4d"
          ],
          "default": "4d"
        }
      },
      "required": [
        "kind"
      ]
    },
    "NumericCardElement": {
      "description": "A card element with a single numeric value.",
      "allOf": [
        {
          "$ref": "#/definitions/CardElement"
        },
        {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "maxLength": 60,
              "description": "The text of the card element."
            },
            "value_type": {
              "type": "object",
              "$ref": "#/definitions/ValueType",
              "description": "The value type associated to the card element."
            }
          },
          "required": [
            "value_type",
            "text"
          ]
        }
      ]
    },
    "BreakdownCardElement": {
      "description": "A card element with a breakdown of the values.",
      "allOf": [
        {
          "$ref": "#/definitions/CardElement"
        },
        {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "maxLength": 65,
              "description": "The text of the card element."
            },
            "direction": {
              "type": "string",
              "description": "The direction of the breakdown card element."
            },
            "value_types": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueType"
              },
              "description": "The value types associated to the card element."
            }
          },
          "required": [
            "text",
            "value_types"
          ]
        }
      ]
    },
    "TimeSeriesCardElement": {
      "description": "A card element with a time series chart.",
      "allOf": [
        {
          "$ref": "#/definitions/CardElement"
        },
        {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "maxLength": 65,
              "description": "The text of the card element."
            },
            "default_interval": {
              "type": "string",
              "description": "The default interval of the time series.",
              "default": "d"
            },
            "value_types": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueType"
              },
              "maxItems": 3,
              "description": "The value types associated to the card element."
            }
          },
          "required": [
            "text",
            "value_types"
          ]
        }
      ]
    },
    "ValueType": {
      "type": "object",
      "description": "The value type of a card element.",
      "discriminator": "kind",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "KPI",
            "FINDING"
          ],
          "description": "Kind of element\n- KPI&#58; Kind of value derived from a KPI occurrence\n- FINDING_COUNT&#58; Kind of value derived from a count of finding occurrences."
        },
        "text": {
          "type": "string",
          "description": "The text of this element type.",
          "maxLength": 22,
          "default": ""
        }
      },
      "required": [
        "kind",
        "text"
      ]
    },
    "KpiValueType": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ValueType"
        },
        {
          "type": "object",
          "properties": {
            "kpi_note_name": {
              "type": "string",
              "description": "The name of the KPI 'Note' associated to the occurrence with the value for this card element value type."
            }
          },
          "required": [
            "kpi_note_name"
          ]
        }
      ]
    },
    "FindingCountValueType": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ValueType"
        },
        {
          "type": "object",
          "properties": {
            "finding_note_names": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The names of the 'Note' associated to the finding that act as filters for counting the occurrences."
            }
          },
          "required": [
            "finding_note_names"
          ]
        }
      ]
    },
    "Policy": {
      "type": "object",
      "description": "Policy provides details about a policy kind for a 'Note'.",
      "properties": {
        "section": {
          "type": "string",
          "maxLength": 25,
          "description": "The section the policy belongs to."
        },
        "title": {
          "type": "string",
          "maxLength": 28,
          "description": "The title of the policy."
        },
        "subtitle": {
          "type": "string",
          "maxLength": 30,
          "description": "The subtitle of the policy."
        },
        "finding_note_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The finding 'Note' names associated to the policy."
        },
        "requires_configuration": {
          "type": "boolean",
          "default": false
        },
        "badge_text": {
          "type": "string",
          "description": "The text associated to the policy badge."
        },
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardElement"
          },
          "description": "The elements of the policy."
        }
      },
      "required": [
        "title",
        "subtitle"
      ]
    },
    "Classify": {
      "type": "object",
      "description": "Security classification details for the finding.",
      "properties": {
        "security_standards": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The security standards impacted by the finding."
        },
        "security_categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The security categories impacted by the finding."
        },
        "security_control": {
          "type": "string",
          "description": "The security control impacted by the finding."
        }
      }
    }
  }
}
